package main

import "fmt"

func main() {
	var 物 uint = 1
	左 := 物 << 物
	右 := 物 >> 物
	あ := []byte{
		byte(物<<(物<<(左)+左) + 物<<(左) + 左),
		byte(物<<(物<<(左+物)-物) - 物<<(物<<(左)+物) + 物<<(左+物) + 物),
		byte(物<<(物<<(左)+左) + 左),
		byte(物<<(物<<(左+物)-物) - 物<<(左+物) - 左 - 物),
		byte(物<<(物<<(左+物)-物) - 物<<(左) - 左),
		byte(物<<(物<<(左+物)-物) - 物<<(左) - 左),
		byte(物<<(左+物) + 左),
	}
	い := (物<<(物<<(左)+左) + 物<<(物<<(左)+物) - 物<<(左)) +
		(uint(あ[物<<(左)]) * ((物<<(物<<(左+物)-物) - 物<<(物<<(左)) + 左) +
			(uint(あ[左+物]) * (物<<(物<<(左)+左) - 物<<(左) - 左 + (uint(あ[左]) *
				(物 + 物<<(物<<(左)) + 左 + (物 << (左 + 物) * uint(あ[物]))))))))
	う := [][]byte{
		append(append([]byte{}, あ[:左]...), あ[物<<(左):]...),
		append([]byte{}, あ[左:]...),
		append(append(append([]byte{}, あ[:左]...), あ[物<<(左):物<<(左)+左]...), あ[左:]...),
	}
	え := make([]byte, uint(あ[物<<(左)+左])<<(左)-uint(あ[物<<(左)+左])+uint(あ[右]))
	for お := range え {
		が := い & uint(あ[右]-あ[左]-byte(物))
		if が < 物 {
			fmt.Printf("%d%s", uint(お)+物, あ[物<<(左)+左:])
		} else {
			fmt.Printf("%s", う[が-物])
		}
		い = い>>(左) | が<<(物<<(物<<(左)+物)-物<<(左))
	}
}
